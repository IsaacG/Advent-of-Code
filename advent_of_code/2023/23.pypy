#!/bin/python
"""Advent of Code, Day 14: Parabolic Reflector Dish."""

import collections
import queue
import pathlib
import time

UP, DOWN, RIGHT, LEFT = complex(0, -1), complex(0, 1), complex(1), complex(-1)
STRAIGHT_NEIGHBORS = [UP, DOWN, RIGHT, LEFT]

def bounding_coords(points):
    """Return bounding min (x, y), max (x, y) for coordinates."""
    min_x = int(min(p.real for p in points))
    max_x = int(max(p.real for p in points))
    min_y = int(min(p.imag for p in points))
    max_y = int(max(p.imag for p in points))
    return min_x, min_y, max_x, max_y


def gneighbors(point):
    return (point + offset for offset in STRAIGHT_NEIGHBORS)


def part2(board):
    min_x, min_y, max_x, max_y = bounding_coords(board)
    start_coord = next(i for i in board if i.imag == min_y)
    end_coord = next(i for i in board if i.imag == max_y)

    # Find all the interesting locations on the board, ignoring the hallways in between.
    forks = {coord for coord in board if len(set(gneighbors(coord)) & board) > 2}
    forks.add(start_coord)
    forks.add(end_coord)

    # Compute the longest distances between all interesting locations.
    longest_dist = collections.defaultdict(lambda: collections.defaultdict(int))
    # For each start location, pick one direction and walk down that hallway until hitting another fork.
    for coord in forks:
        neighbors = set(gneighbors(coord)) & board
        for current_node in neighbors:
            steps = 1
            prior = coord
            while current_node not in forks:
                steps += 1
                options = set(gneighbors(current_node)) & board
                current_node, prior = next(i for i in options if i != prior), current_node

            # Record the longest hallways between these two locations.
            dist = max(steps, longest_dist[coord][current_node])
            longest_dist[coord][current_node] = dist
            longest_dist[current_node][coord] = dist

    # Replace coordinates with `int` labels to reduce the storage needed to store paths.
    # Replace defaultdicts with dicts at the same time.
    labels = {coord: idx for idx, coord in enumerate(forks)}
    longest_dist = {
        labels[start]: {
            labels[end]: distance
            for end, distance in data.items()
        }
        for start, data in longest_dist.items()
    }
    start, end = labels[start_coord], labels[end_coord]

    # The end node is connected to exactly one fork.
    # If we solve to that fork, we can prune the graph once reaching it.
    penultimate_pos, penultimate_distance = list(longest_dist[end].items())[0]

    # Explore all paths, looking for the max steps to the end.
    max_steps = 0
    to_explore = [(0, start, {start})]

    while to_explore:
        steps, current_node, seen = to_explore.pop()
        # Stop when we get to the penultimate node.
        if current_node == penultimate_pos:
            if steps > max_steps:
                max_steps = steps
        else:
            for next_pos, distance in longest_dist[current_node].items():
                if next_pos in seen:
                    continue

                # Optimization: prune when we can no longer out perform a prior max_steps.
                # Given the set of seen values, explore all reachable, unused nodes and assume
                # max distance to each node. See if that could do better.
                reachable = set()
                todo = {next_pos}
                while todo:
                    cur = todo.pop()
                    for neighbor in longest_dist[cur]:
                        if neighbor not in seen and neighbor not in reachable:
                            todo.add(neighbor)
                            reachable.add(neighbor)
                # Bail if we cannot reach the end.
                if penultimate_pos not in reachable:
                    continue
                # Bail if we cannot beat the prior record.
                possible_points = sum(max(longest_dist[node].values()) for node in reachable)
                if steps + possible_points < max_steps:
                    continue

                to_explore.append((steps + distance, next_pos, seen | {next_pos}))

    return max_steps + penultimate_distance

def parse(puzzle_input: str) -> set[complex]:
    return {
        complex(x, y)
        for y, line in enumerate(puzzle_input.splitlines())
        for x, char in enumerate(line)
        if char != "#"
    }

def main():
    data = pathlib.Path("2023/data/23.txt").read_text().rstrip()
    parsed = parse(data)

    t1 = time.perf_counter()
    got = part2(parsed)
    t2 = time.perf_counter()
    print(t2 - t1, "s")
    print(got)


if __name__ == "__main__":
    main()
